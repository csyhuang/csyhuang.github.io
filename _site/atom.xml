<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Clare S. Y. Huang</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2020-07-14T18:04:02-05:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Clare S. Y. Huang</name>
   <email>csyhuang@uchicago.edu</email>
 </author>

 
 <entry>
   <title>Minor release of my python package + release procedures</title>
   <link href="http://localhost:4000/2020/07/14/hn2016_falwa-release0.4.1/"/>
   <updated>2020-07-14T00:00:00-05:00</updated>
   <id>http://localhost:4000/2020/07/14/hn2016_falwa-release0.4.1</id>
   <content type="html">&lt;p&gt;[&lt;a href=&quot;https://github.com/csyhuang/hn2016_falwa/releases/tag/0.4.1&quot;&gt;hn2016_falwa Release 0.4.1&lt;/a&gt;] A minor release of my python package &lt;a href=&quot;https://github.com/csyhuang/hn2016_falwa&quot;&gt;hn2016_falwa&lt;/a&gt; is published. Thanks &lt;a href=&quot;https://github.com/chpolste&quot;&gt;Christopher Polster&lt;/a&gt; for submitting a pull request that fixes the interface of &lt;code class=&quot;highlighter-rouge&quot;&gt;BarotropicField&lt;/code&gt;. Moreover, I added procedures to process masked array in &lt;code class=&quot;highlighter-rouge&quot;&gt;QGField&lt;/code&gt; such that it can be conveniently used to process ERA5 data which is stored as masked array in netCDF files.&lt;/p&gt;

&lt;p&gt;As a memo to myself - procedures for a release (which I often forget and have to google üòÖ):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Update version number in &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;readme.md&lt;/code&gt; and documentation pages.&lt;/li&gt;
  &lt;li&gt;Add a (light-weighted) tag to the commit: &lt;code class=&quot;highlighter-rouge&quot;&gt;git tag &amp;lt;tagname&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Not only push the commits but also the tag by &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin &amp;lt;tagname&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I have time, I would update the version on PYPI too:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create the &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/&lt;/code&gt; directory and the installation files: &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 setup.py sdist bdist_wheel&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Upload the package: &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 -m twine upload --repository testpypi dist/*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Reading Notes on Spark - The Definitive Guide</title>
   <link href="http://localhost:4000/2020/04/18/spark-definitive-guide-reading-note/"/>
   <updated>2020-04-18T00:00:00-05:00</updated>
   <id>http://localhost:4000/2020/04/18/spark-definitive-guide-reading-note</id>
   <content type="html">&lt;p&gt;I am reading the book &lt;a href=&quot;https://www.oreilly.com/library/view/spark-the-definitive/9781491912201/&quot;&gt;Spark: The Definitive Guide&lt;/a&gt; by Bill Chambers, Matei Zaharia. Here are my reading notes:
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/spark_the_def_guide/ch1&quot;&gt;Ch.1 - What is Apache Spark?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/spark_the_def_guide/ch2&quot;&gt;Ch.2 - A Gentle Introduction to Spark&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>READ MORE button via jekyll</title>
   <link href="http://localhost:4000/2020/04/17/add-read-more-on-front-page/"/>
   <updated>2020-04-17T00:00:00-05:00</updated>
   <id>http://localhost:4000/2020/04/17/add-read-more-on-front-page</id>
   <content type="html">&lt;p&gt;Found a workable solution adding ‚Äúread more‚Äù button to jekyll posts from &lt;a href=&quot;https://jonnylangefeld.com/blog/how-to-add-a-read-more-button-that-doesnt-suck-to-your-jekyll-blog&quot;&gt;Jonny Langefeld‚Äôs blog post&lt;/a&gt;. üòÑ Thanks for the solution!
&lt;!--more--&gt;
Here we go. üòâ&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>More efficient way to do outer join with large dataframes</title>
   <link href="http://localhost:4000/2020/04/16/faster-outer-join-by-two-left-joins/"/>
   <updated>2020-04-16T00:00:00-05:00</updated>
   <id>http://localhost:4000/2020/04/16/faster-outer-join-by-two-left-joins</id>
   <content type="html">&lt;p&gt;Today I learned from a colleague the way of doing &lt;code class=&quot;highlighter-rouge&quot;&gt;outer join&lt;/code&gt; of large dataframes more efficiently: instead of doing the &lt;code class=&quot;highlighter-rouge&quot;&gt;outer join&lt;/code&gt;, you can first &lt;code class=&quot;highlighter-rouge&quot;&gt;union&lt;/code&gt; the key column, and then implement &lt;code class=&quot;highlighter-rouge&quot;&gt;left join&lt;/code&gt; twice. I have done an experiment myself on the cluster with two dataframes (&lt;code class=&quot;highlighter-rouge&quot;&gt;df1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;df2&lt;/code&gt;) - each dataframe has ~10k rows, and there is only ~10% of overlap(i.e. an inner-join would result in ~1k rows).&lt;/p&gt;

&lt;p&gt;The usual way of doing outer join would be like:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;how&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'outer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop_duplicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is an equivalent way(I call it &lt;em&gt;union-left&lt;/em&gt; here) that takes less time to compute:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;how&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'left'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;how&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'left'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop_duplicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The distribution of IDs in the two dataframes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;df1 only&lt;/th&gt;
      &lt;th&gt;overlap&lt;/th&gt;
      &lt;th&gt;df2 only&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;# of ids&lt;/td&gt;
      &lt;td&gt;8625&lt;/td&gt;
      &lt;td&gt;914&lt;/td&gt;
      &lt;td&gt;8623&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here is the distribution of computing times for &lt;code class=&quot;highlighter-rouge&quot;&gt;inner&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;outer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;union-left&lt;/code&gt;(that gives same results as &lt;code class=&quot;highlighter-rouge&quot;&gt;outer&lt;/code&gt;) joins(I repeated each join 20 times):&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: center;&quot; src=&quot;/assets/img/types_of_join_computing_time.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For these sizes of dataframes, the &lt;code class=&quot;highlighter-rouge&quot;&gt;union-left&lt;/code&gt; join is on average ~20% faster than the equivalent &lt;code class=&quot;highlighter-rouge&quot;&gt;outer&lt;/code&gt; join.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Local wave activity calculation for Southern Hemisphere available in release0.4.0</title>
   <link href="http://localhost:4000/2020/04/09/hn2016_falwa-release0.4.0/"/>
   <updated>2020-04-09T00:00:00-05:00</updated>
   <id>http://localhost:4000/2020/04/09/hn2016_falwa-release0.4.0</id>
   <content type="html">&lt;p&gt;[hn2016_falwa Release 0.4.0] üòÑI am happy to announce that the climate data analysis in Nakamura and Huang(2018, Science) for the southern hemisphere is also available &lt;a href=&quot;https://github.com/csyhuang/hn2016_falwa&quot;&gt;on GitHub&lt;/a&gt; now! (Finally, I have time to do a thorough check of the code and make the release‚Ä¶)&lt;/p&gt;

&lt;p&gt;Check out the release note for enhanced functionality:&lt;br /&gt;
&lt;a href=&quot;https://github.com/csyhuang/hn2016_falwa/releases/tag/0.4.0&quot;&gt;https://github.com/csyhuang/hn2016_falwa/releases/tag/0.4.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The documentation page has been fixed too:&lt;br /&gt;
&lt;a href=&quot;https://csyhuang.github.io/hn2016_falwa&quot;&gt;https://csyhuang.github.io/hn2016_falwa&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jupyter notebook demonstrating the usage of the functions:&lt;br /&gt;
&lt;a href=&quot;https://github.com/csyhuang/hn2016_falwa/blob/master/examples/nh2018_science/demo_script_for_nh2018.ipynb&quot;&gt;https://github.com/csyhuang/hn2016_falwa/blob/master/examples/nh2018_science/demo_script_for_nh2018.ipynb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions/issues regarding the usage of the package, feel free to post on the &lt;a href=&quot;https://github.com/csyhuang/hn2016_falwa/issues&quot;&gt;Issue page&lt;/a&gt; of the repo! I will help you fix them soon as I can!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tips for writing more efficient SQL</title>
   <link href="http://localhost:4000/2020/02/07/tips-for-writing-more-efficient-sql/"/>
   <updated>2020-02-07T00:00:00-06:00</updated>
   <id>http://localhost:4000/2020/02/07/tips-for-writing-more-efficient-sql</id>
   <content type="html">&lt;p&gt;Learned from colleagues some points to pay attention to when writing SQL queries. (This post will be updated from time to time.)&lt;/p&gt;

&lt;h1 id=&quot;partitioned-tables&quot;&gt;Partitioned tables&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Always&lt;/strong&gt; specify the partition in the &lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt; clause. If you have to retrieve data from several partitions, loop through it one-by-one.&lt;/p&gt;

&lt;h1 id=&quot;distinct-elements&quot;&gt;Distinct elements&lt;/h1&gt;

&lt;p&gt;Note that the two queries&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DISTINCT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_X&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_X&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;give the same result. However, the second SQL query will be executed faster. There is no difference calling &lt;code class=&quot;highlighter-rouge&quot;&gt;distinct&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;group by&lt;/code&gt; via (py)spark though.&lt;/p&gt;

&lt;h1 id=&quot;join-vs-where&quot;&gt;JOIN v.s. WHERE&lt;/h1&gt;

&lt;p&gt;Always use &lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt; to filter the table to be joined to the smallest, e.g.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purchase&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20190207&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eligibility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the line &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE c.eligibility = True&lt;/code&gt; is executed to filter the table &lt;code class=&quot;highlighter-rouge&quot;&gt;credit&lt;/code&gt; before the &lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;. This shrinks the table &lt;code class=&quot;highlighter-rouge&quot;&gt;credit&lt;/code&gt; to the smallest before joining.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>I started a comic series about bouldering (for fun)</title>
   <link href="http://localhost:4000/2019/12/20/comic-series-on-bouldering/"/>
   <updated>2019-12-20T00:00:00-06:00</updated>
   <id>http://localhost:4000/2019/12/20/comic-series-on-bouldering</id>
   <content type="html">&lt;p&gt;This is not about work but &lt;strong&gt;for fun&lt;/strong&gt; :D&lt;/p&gt;

&lt;p&gt;I recently started learning bouldering (2.5 months till now?) and that‚Äôs lots of fun! I keep updating a comic series - the &lt;a href=&quot;https://www.instagram.com/explore/tags/matchman_bouldering_series/&quot;&gt;Matchman Bouldering Series&lt;/a&gt; - on &lt;a href=&quot;https://www.instagram.com/clarescookbook/&quot;&gt;Instagram&lt;/a&gt;/&lt;a href=&quot;https://matchman-bouldering-series.tumblr.com/&quot;&gt;Tumblr&lt;/a&gt; that records the ideas I learned from friends in every session collaborating with my college friend &lt;a href=&quot;https://www.instagram.com/martin_ka_hei/&quot;&gt;Martin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some previews‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/thumbnails-of-matchman.png&quot; alt=&quot;Matchman Bouldering Series&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are fond of bouldering and have practical/physics ideas to share, ping me and see if we can collaborate! :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Conversion of pandas dataframe to pyspark dataframe with an older version of pandas</title>
   <link href="http://localhost:4000/2019/10/30/pandas_to_pyspark_before_0.19.2/"/>
   <updated>2019-10-30T00:00:00-05:00</updated>
   <id>http://localhost:4000/2019/10/30/pandas_to_pyspark_before_0.19.2</id>
   <content type="html">&lt;p&gt;Pandas dataframe can be converted to pyspark dataframe easily in the newest version of &lt;code class=&quot;highlighter-rouge&quot;&gt;pandas&lt;/code&gt; after &lt;code class=&quot;highlighter-rouge&quot;&gt;v0.19.2&lt;/code&gt;. If you are using an older version of pandas, you have to do a bit more work for such conversion as follows.&lt;/p&gt;

&lt;p&gt;First, load the packages and initiate a spark session.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SparkSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SparkSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; \
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pandas to pyspark DF&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;p&gt;Here is an example of pandas dataframe to be converted.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;'alphabet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'pyspark'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div&gt;
&lt;style scoped=&quot;&quot;&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;


&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;index&lt;/th&gt;
      &lt;th&gt;alphabet&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;p&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;p&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;r&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;k&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;To convert it to a &lt;code class=&quot;highlighter-rouge&quot;&gt;pyspark&lt;/code&gt; dataframe, one has to create a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;Row&lt;/code&gt; objects and pass it into &lt;code class=&quot;highlighter-rouge&quot;&gt;createDataFrame&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df_pyspark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createDataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphabet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'alphabet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_pyspark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+--------+-----+
|alphabet|index|
+--------+-----+
|       p|    0|
|       y|    1|
|       s|    2|
|       p|    3|
|       a|    4|
|       r|    5|
|       k|    6|
+--------+-----+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Common issues in RNN training</title>
   <link href="http://localhost:4000/2019/10/14/notes-on-handling-rnn-training-problem/"/>
   <updated>2019-10-14T00:00:00-05:00</updated>
   <id>http://localhost:4000/2019/10/14/notes-on-handling-rnn-training-problem</id>
   <content type="html">&lt;p&gt;Exploding gradients and vanishing gradients are two common issues with the training of RNN.&lt;/p&gt;

&lt;p&gt;To avoid exploding gradients, one may use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Truncated Back-propagation through time (BPTT)&lt;/li&gt;
  &lt;li&gt;Clip gradients at threshold&lt;/li&gt;
  &lt;li&gt;RMSprop to adjust learning rate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vanishing gradients are harder to detect. To avoid it, one may use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Weight initialization&lt;/li&gt;
  &lt;li&gt;ReLu activation functions&lt;/li&gt;
  &lt;li&gt;RMSprop&lt;/li&gt;
  &lt;li&gt;LSTM, GRUs&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Generate sequence from an array column of pyspark dataframe</title>
   <link href="http://localhost:4000/2019/09/25/pyspark-generate-sequences/"/>
   <updated>2019-09-25T00:00:00-05:00</updated>
   <id>http://localhost:4000/2019/09/25/pyspark-generate-sequences</id>
   <content type="html">&lt;p&gt;Suppose I have a Hive table that has a column of sequences,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+------------------+
|          sequence|
+------------------+
|      [3, 23, 564]|
+------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;how to generate a column that contains permutations of each sequence in multiple rows? The desired output shall look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+------------------+------------------+
|          sequence|       permutation|
+------------------+------------------+
|      [3, 23, 564]|      [3, 23, 564]|
|      [3, 23, 564]|      [3, 564, 23]|
|      [3, 23, 564]|      [23, 3, 564]|
|      [3, 23, 564]|      [23, 564, 3]|
|      [3, 23, 564]|      [564, 3, 23]|
|      [3, 23, 564]|      [564, 23, 3]|
+------------------+------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to get multiple rows out of each row, we need to use the function &lt;code class=&quot;highlighter-rouge&quot;&gt;explode&lt;/code&gt;. First, we write a user-defined function (UDF) to return the list of permutations given a array (sequence):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SparkSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql.types&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegerType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayType&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;udf_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArrayType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArrayType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;permutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itertools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;udf_type&lt;/code&gt; function is adapted from the &lt;a href=&quot;https://johnpaton.net/posts/clean-spark-udfs/&quot;&gt;blog post by John Paton&lt;/a&gt;. The output type is specified to be an array of ‚Äúarray of integers‚Äù.&lt;/p&gt;

&lt;p&gt;The application of this function with &lt;code class=&quot;highlighter-rouge&quot;&gt;explode&lt;/code&gt; will yield the result above:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createDataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;564&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'permutation'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;explode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sequence'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Pyspark error "Could not serialize object"</title>
   <link href="http://localhost:4000/2019/09/24/pyspark-could-not-serialize-object/"/>
   <updated>2019-09-24T00:00:00-05:00</updated>
   <id>http://localhost:4000/2019/09/24/pyspark-could-not-serialize-object</id>
   <content type="html">&lt;p&gt;This post is related to the idea discuss in the post &lt;a href=&quot;https://www.placeiq.com/2017/11/how-to-solve-non-serializable-errors-when-instantiating-objects-in-spark-udfs/&quot;&gt;‚ÄúHow to Solve Non-Serializable Errors When Instantiating Objects In Spark UDFs‚Äù&lt;/a&gt;. Here I discuss the solution in a hypothetical scenario in pyspark.
&lt;!--more--&gt;
Suppose I have a class to transform string to sum of numbers like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql.functions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql.functions&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udf&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql.types&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegerType&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnimalsToNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_mapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'elephant'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'cat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_spark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_up_animals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addition_udf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;udf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegerType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addition_udf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'animal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(In practical cases, &lt;code class=&quot;highlighter-rouge&quot;&gt;self._mapping&lt;/code&gt; is a huge object containing the dictionary and other attributes that are derived from methods in the &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimalsToNumbers&lt;/code&gt; class.) If I want to transform a dataframe &lt;code class=&quot;highlighter-rouge&quot;&gt;df&lt;/code&gt; that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+-------------+
|       animal|
+-------------+
|elephant+bear|
|     cat+bear|
+-------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The operation&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;AnimalsToNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_up_animals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will lead to an error like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---------------------------------------------------------------------------
Py4JError                                 Traceback (most recent call last)
~/anaconda3/envs/pyspark_demo/lib/python3.5/site-packages/pyspark/serializers.py in dumps(self, obj)
    589         try:
--&amp;gt; 590             return cloudpickle.dumps(obj, 2)
    591         except pickle.PickleError:
...
PicklingError: Could not serialize object: Py4JError: An error occurred while calling o25.__getstate__. Trace:
py4j.Py4JException: Method __getstate__([]) does not exist
	at py4j.reflection.ReflectionEngine.getMethod(ReflectionEngine.java:318)
	at py4j.reflection.ReflectionEngine.getMethod(ReflectionEngine.java:326)
	at py4j.Gateway.invoke(Gateway.java:274)
	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)
	at py4j.commands.CallCommand.execute(CallCommand.java:79)
	at py4j.GatewayConnection.run(GatewayConnection.java:238)
	at java.lang.Thread.run(Thread.java:748)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The issue is that, as &lt;code class=&quot;highlighter-rouge&quot;&gt;self._mapping&lt;/code&gt; appears in the function &lt;code class=&quot;highlighter-rouge&quot;&gt;addition&lt;/code&gt;, when applying &lt;code class=&quot;highlighter-rouge&quot;&gt;addition_udf&lt;/code&gt; to the pyspark dataframe, the object &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; (i.e. the &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimalsToNumbers&lt;/code&gt; class) has to be serialized but it can‚Äôt be.&lt;/p&gt;

&lt;p&gt;A (surprisingly simple) way is to create a reference to the dictionary (&lt;code class=&quot;highlighter-rouge&quot;&gt;self._mapping&lt;/code&gt;) but not the object:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnimalsToNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_mapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'elephant'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'cat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_spark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;
        
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_up_animals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_mapping&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animal_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;addition_udf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;udf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegerType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addition_udf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'animal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimalsToNumbers(spark).add_up_animals(df).show()&lt;/code&gt; would yield:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+-------------+---+
|       animal|sum|
+-------------+---+
|elephant+bear|  5|
|     cat+bear| 13|
+-------------+---+

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yay :)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Handling JSON in PostgreSQL</title>
   <link href="http://localhost:4000/2019/09/16/json-in-postgresql/"/>
   <updated>2019-09-16T00:00:00-05:00</updated>
   <id>http://localhost:4000/2019/09/16/json-in-postgresql</id>
   <content type="html">&lt;p&gt;Found a useful &lt;a href=&quot;https://devhints.io/postgresql-json&quot;&gt;cheatsheet&lt;/a&gt; that listed out operations on JSON in PostgreSQL.&lt;/p&gt;

&lt;p&gt;If I want to list the rows where column &lt;code class=&quot;highlighter-rouge&quot;&gt;col1&lt;/code&gt; in table &lt;code class=&quot;highlighter-rouge&quot;&gt;table1&lt;/code&gt; contains a JSON object with the key &lt;code class=&quot;highlighter-rouge&quot;&gt;key1&lt;/code&gt;, I can use:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'key1'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Local wave activity package updated to version 0.3.7</title>
   <link href="http://localhost:4000/2019/09/15/lwa-package-updated-to-new-version/"/>
   <updated>2019-09-15T00:00:00-05:00</updated>
   <id>http://localhost:4000/2019/09/15/lwa-package-updated-to-new-version</id>
   <content type="html">&lt;p&gt;The &lt;a href=&quot;https://github.com/csyhuang/hn2016_falwa&quot;&gt;python package&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;hn2016_falwa&lt;/code&gt; has just been updated with the following changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Switched the unittest framework from &lt;code class=&quot;highlighter-rouge&quot;&gt;unittest&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;pytest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Improved interface of the QGField object&lt;/li&gt;
  &lt;li&gt;Added a new function &lt;code class=&quot;highlighter-rouge&quot;&gt;hn2016_falwa.download_data.retrieve_erai&lt;/code&gt; to download ERA-Interim data (but not connected to the main program yet)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My package uses &lt;code class=&quot;highlighter-rouge&quot;&gt;f2py&lt;/code&gt;. When switching from &lt;code class=&quot;highlighter-rouge&quot;&gt;unittest&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;pytest&lt;/code&gt;, there are several changes to make in &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis&lt;/code&gt; to accommodate such usage:&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;numpy.distutils.core.setup&lt;/code&gt;), remove the argument&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;test_suite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tests.my_module_suite'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and add:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setup_requires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pytest-runner'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tests_require&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pytest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; section looks like:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;script:
  - python setup.py pytest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Visit to AOS at UW-Madison</title>
   <link href="http://localhost:4000/2019/09/10/colloquium-at-uw-madison/"/>
   <updated>2019-09-10T00:00:00-05:00</updated>
   <id>http://localhost:4000/2019/09/10/colloquium-at-uw-madison</id>
   <content type="html">&lt;p&gt;I visited the &lt;a href=&quot;https://www.aos.wisc.edu/&quot;&gt;Department of Atmospheric and Oceanic Sciences&lt;/a&gt; at the &lt;a href=&quot;https://www.wisc.edu/&quot;&gt;University of Wisconsin-Madison&lt;/a&gt; for two days and had a lot of fun discussing atmospheric (and machine learning) research with the scientists there. Thanks Prof. Jon Martin for inviting me over!&lt;/p&gt;

&lt;p&gt;The colloquium I gave on Monday was an overview of the finite-amplitude local Rossby wave activity theory and its application to study blocking. We learned from this framework that atmospheric blocking can be modelled as a traffic jam problem. I also mentioned the follow-up work by &lt;a href=&quot;https://journals.ametsoc.org/toc/atsc/current&quot;&gt;Paradise et al. (2019, JAS)&lt;/a&gt; that discusses the implication of this notion.&lt;/p&gt;

&lt;p&gt;The slides for my colloquium can be found below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dropbox.com/s/ladgdo6tjkyhvmo/clare-uw-colloquium-20190909.pdf?dl=1&quot;&gt;&lt;img src=&quot;/assets/img/uw-colloquium-thumbnail.png&quot; alt=&quot;Slides for UW-Madison Colloquium&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Papers on architecture of Recurrent Neural Networks (RNN)</title>
   <link href="http://localhost:4000/2019/07/24/rnn-papers/"/>
   <updated>2019-07-24T00:00:00-05:00</updated>
   <id>http://localhost:4000/2019/07/24/rnn-papers</id>
   <content type="html">&lt;p&gt;Bookmarking some papers mentioned in Andrew Ng‚Äôs course &lt;a href=&quot;https://www.coursera.org/learn/nlp-sequence-models&quot;&gt;Sequence Models&lt;/a&gt;:&lt;/p&gt;

&lt;h3 id=&quot;gate-recurrent-unit-gru&quot;&gt;Gate Recurrent Unit (GRU)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cho, K., Van Merri√´nboer, B., Bahdanau, D., &amp;amp; Bengio, Y. (2014). &lt;a href=&quot;https://arxiv.org/abs/1409.1259&quot;&gt;On the properties of neural machine translation: Encoder-decoder approaches&lt;/a&gt;. &lt;em&gt;arXiv preprint arXiv:1409.1259&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Chung, J., Gulcehre, C., Cho, K., &amp;amp; Bengio, Y. (2014). &lt;a href=&quot;https://arxiv.org/abs/1412.3555&quot;&gt;Empirical evaluation of gated recurrent neural networks on sequence modeling&lt;/a&gt;. &lt;em&gt;arXiv preprint arXiv:1412.3555&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;long-short-term-memory-lstm&quot;&gt;Long short-term memory (LSTM)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Hochreiter, S., &amp;amp; Schmidhuber, J. (1997). &lt;a href=&quot;https://www.bioinf.jku.at/publications/older/2604.pdf&quot;&gt;Long short-term memory&lt;/a&gt;. &lt;em&gt;Neural computation&lt;/em&gt;, 9(8), 1735-1780.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(More to update)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Useful Git commands at work</title>
   <link href="http://localhost:4000/2019/06/20/useful-git-commands/"/>
   <updated>2019-06-20T00:00:00-05:00</updated>
   <id>http://localhost:4000/2019/06/20/useful-git-commands</id>
   <content type="html">&lt;p&gt;Below are solutions I curated online to solve problems related to Git when collaborating with others and working on several branches together. &lt;em&gt;This post will be updated from time to time.&lt;/em&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3 id=&quot;copy-a-file-from-one-branch-to-another&quot;&gt;Copy a file from one branch to another&lt;/h3&gt;
&lt;p&gt;To copy a file to the current branch from another branch (&lt;a href=&quot;https://stackoverflow.com/questions/307579/how-do-i-copy-a-version-of-a-single-file-from-one-git-branch-to-another/7099164&quot;&gt;ref&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout another_branch the_file_you_want.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;merge-changes-from-master-branch-to-yours&quot;&gt;Merge changes from master branch to yours&lt;/h3&gt;
&lt;p&gt;To merge changes from another branch to yours, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt; depending on the preferred commit order. BitBucket has a &lt;a href=&quot;https://www.atlassian.com/git/tutorials/merging-vs-rebasing&quot;&gt;nice tutorial&lt;/a&gt; discussing the difference btween the two. Usually I‚Äôd love to have the changes pulled from another branch as a single commit with &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout master      # the branch with changes
git pull                 # pull the remote changes to local master branch
git checkout mybranch    # go back to mybranch
git merge master         # incorporate the changes into mybranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;how-to-use-git-revert&quot;&gt;How to use &lt;code class=&quot;highlighter-rouge&quot;&gt;git revert&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/undoing-changes/git-revert&quot;&gt;Useful tutorial&lt;/a&gt; from BitBucket on &lt;code class=&quot;highlighter-rouge&quot;&gt;git revert&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;compare-differences-between-branches-and-output-the-results&quot;&gt;Compare differences between branches and output the results&lt;/h3&gt;
&lt;p&gt;If you want to compare the difference between your (more updated) branch and the master branch, use the command&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git diff master..your_branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can save the comparison results into a text file with colors by&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git diff master..your_branch &amp;gt; your_branch_to_master.diff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The color can be viewed when you open the &lt;code class=&quot;highlighter-rouge&quot;&gt;.diff&lt;/code&gt; file with &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;update-password-for-git-on-mac-os-x&quot;&gt;Update password for Git on Mac OS X&lt;/h3&gt;
&lt;p&gt;use the following command&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global credential.helper osxkeychain
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[to be continued]&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Comparison between different statistical language models</title>
   <link href="http://localhost:4000/2019/06/13/comparison-between-different-statistical-language-models/"/>
   <updated>2019-06-13T00:00:00-05:00</updated>
   <id>http://localhost:4000/2019/06/13/comparison-between-different-statistical-language-models</id>
   <content type="html">&lt;p&gt;When researching on different machine learning models for modeling languages (i.e. sequence model), here are some useful resources I found online:&lt;/p&gt;

&lt;h3 id=&quot;articles&quot;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.alibabacloud.com/blog/hmm-memm-and-crf-a-comparative-analysis-of-statistical-modeling-methods_592049?spm=a2c41.11544604.0.0&quot;&gt;HMM, MEMM, and CRF: A Comparative Analysis of Statistical Modeling Methods&lt;/a&gt; by Alibaba Clouder&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.echen.me/2012/01/03/introduction-to-conditional-random-fields/&quot;&gt;Introduction to Conditional Random Fields&lt;/a&gt; by Edwin Chen&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://homepages.inf.ed.ac.uk/csutton/publications/crftut-fnt.pdf&quot;&gt;An Introduction to Conditional Random Fields&lt;/a&gt; by Charles Sutton and Andrew McCallum&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.albertauyeung.com/post/python-sequence-labelling-with-crf/&quot;&gt;Performing Sequence Labelling using CRF in Python&lt;/a&gt; by Albert AuYeung&lt;/li&gt;
  &lt;li&gt;(more to update)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;courses&quot;&gt;Courses&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yisongyue.com/courses/cs155/2016_winter/&quot;&gt;Machine Learning &amp;amp; Data Mining&lt;/a&gt; by &lt;a href=&quot;mailto:yyue@caltech.edu&quot;&gt;Yisong Yue&lt;/a&gt; at CalTech&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- https://towardsdatascience.com/conditional-random-field-tutorial-in-pytorch-ca0d04499463

http://web.cse.ohio-state.edu/~fosler-lussier.1/papers/IEEE_CRF_SALP_FoslerEtalPreprint.pdf

https://web.stanford.edu/~jurafsky/asru09.pdf

https://towardsdatascience.com/review-crf-rnn-conditional-random-fields-as-recurrent-neural-networks-semantic-segmentation-a11eb6e40c8c

http://www.robots.ox.ac.uk/~szheng/papers/CRFasRNN.pdf


https://blog.paperspace.com/recurrent-neural-networks-part-1-2/

https://medium.com/deep-writing

https://www.quora.com/Are-recurrent-neural-networks-RNNs-considered-a-generative-model-in-Machine-Learning


https://towardsdatascience.com/evaluating-text-output-in-nlp-bleu-at-your-own-risk-e8609665a213

 --&gt;
</content>
 </entry>
 
 <entry>
   <title>Read libsvm files into PySpark dataframe</title>
   <link href="http://localhost:4000/2018/12/14/read-libsvm-to-pyspark-df/"/>
   <updated>2018-12-14T00:00:00-06:00</updated>
   <id>http://localhost:4000/2018/12/14/read-libsvm-to-pyspark-df</id>
   <content type="html">&lt;p&gt;I wanted to load the libsvm files provided in &lt;a href=&quot;https://github.com/tensorflow/ranking&quot;&gt;tensorflow/ranking&lt;/a&gt; into PySpark dataframe, but couldn‚Äôt find existing modules for that. Here is a version I wrote to do the job. (Disclaimer: not the most elegant solution, but it works.)
&lt;!--more--&gt;
First of all, load the pyspark utilities required.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SparkContext&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SparkSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.ml.linalg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SparseVector&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Initiate a spark session for creation of dataframe.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SparkContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;read_libsvm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spark_session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SparkSession&lt;/span&gt; \
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; \
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;read_libsvm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Get the path to the data files.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_TRAIN_DATA_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data/train.txt&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_TEST_DATA_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data/test.txt&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the module I wrote for the purpose:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_libsvm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    A utility function that takes in a libsvm file and turn it to a pyspark dataframe.

    Args:
        filepath (str): The file path to the data file.
        query_id (bool): whether 'qid' is present in the file.

    Returns:
        A pyspark dataframe that contains the data loaded.
    '''&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;train_outcome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;train_qid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lstrip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'qid:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;index_value_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;index_value_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
                                       &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):]]))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;max_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_value_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;qid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_qid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_outcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;feat_vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SparseVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_value_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index_value_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createDataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let‚Äôs see how the train and test sets look like in the tf-ranking package:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;train_df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_libsvm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_TRAIN_DATA_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_libsvm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_TEST_DATA_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;train_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+--------------------+-----+---+
|         feat_vector|label|qid|
+--------------------+-----+---+
|(137,[5,13,17,42,...|    0|  1|
|(137,[11,13,18,30...|    2|  1|
|(137,[11,27,29,39...|    2|  1|
|(137,[5,10,26,31,...|    1|  1|
|(137,[13,17,22,24...|    2|  2|
+--------------------+-----+---+
only showing top 5 rows
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;test_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+--------------------+-----+---+
|         feat_vector|label|qid|
+--------------------+-----+---+
|(137,[2,7,37,40,4...|    1|  1|
|(137,[1,8,12,15,2...|    2|  1|
|(137,[4,11,15,16,...|    0|  1|
|(137,[14,19,20,33...|    0|  1|
|(137,[9,12,19,26,...|    1|  2|
+--------------------+-----+---+
only showing top 5 rows
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Simple pyspark solutions</title>
   <link href="http://localhost:4000/2018/11/28/pyspark-solution-1/"/>
   <updated>2018-11-28T00:00:00-06:00</updated>
   <id>http://localhost:4000/2018/11/28/pyspark-solution-1</id>
   <content type="html">&lt;p&gt;Here is a curation of some solutions to simple problems encountered when working with pyspark.&lt;/p&gt;

&lt;h3 id=&quot;how-to-replace-string-in-a-column&quot;&gt;How to replace string in a column?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/37038014/pyspark-replace-strings-in-spark-dataframe-column&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql.functions&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replacement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;how-to-avoid-duplicate-columns-when-joining-two-dataframe-on-columns-with-the-same-name&quot;&gt;How to avoid duplicate columns when joining two dataframe on columns with the same name?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.databricks.com/spark/latest/faq/join-two-dataframes-duplicated-column.html&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Ubuntu on Windows</title>
   <link href="http://localhost:4000/2018/11/19/ubuntu-on-windows/"/>
   <updated>2018-11-19T00:00:00-06:00</updated>
   <id>http://localhost:4000/2018/11/19/ubuntu-on-windows</id>
   <content type="html">&lt;p&gt;Found a useful article: &lt;a href=&quot;https://www.howtogeek.com/261383/how-to-access-your-ubuntu-bash-files-in-windows-and-your-windows-system-drive-in-bash/&quot;&gt;How to Access Your Ubuntu Bash Files in Windows (and Your Windows System Drive in Bash)&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Resources on Python Packaging</title>
   <link href="http://localhost:4000/2018/07/01/python-packaging/"/>
   <updated>2018-07-01T00:00:00-05:00</updated>
   <id>http://localhost:4000/2018/07/01/python-packaging</id>
   <content type="html">&lt;p&gt;On my way figuring out how to properly write unit test for my python package, 
I have come across the useful pages below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://python-packaging.readthedocs.io/&quot;&gt;Python Packaging (official page)&lt;/a&gt; 
(comprehensive manual)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.pytest.org/en/latest/goodpractices.html&quot;&gt;SetupTools (official page)&lt;/a&gt;: I 
read about how to use the development mode here.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.python-guide.org/en/latest/writing/tests/&quot;&gt;Testing Your Code&lt;/a&gt; 
from the Hitchhiker‚Äôs Guide to Python (introductory)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.pytest.org/en/latest/goodpractices.html&quot;&gt;Good Integration Practices&lt;/a&gt; 
from pytest&lt;/li&gt;
  &lt;li&gt;(more to update)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unit tests are worth the time writing to make sure your package works as you expected. 
I also found some commercial packages using unit tests as sample script for user to 
refer to (e.g. &lt;a href=&quot;https://github.com/allenai/allennlp&quot;&gt;AllenNLP&lt;/a&gt;).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Setting up a Dash App on PythonAnywhere</title>
   <link href="http://localhost:4000/2018/06/24/set-up-dash-app-on-pythonanywhere/"/>
   <updated>2018-06-24T00:00:00-05:00</updated>
   <id>http://localhost:4000/2018/06/24/set-up-dash-app-on-pythonanywhere</id>
   <content type="html">&lt;p&gt;After opening an account on &lt;a href=&quot;http://pythonanywhere.com&quot;&gt;pythonanywhere&lt;/a&gt;, 
go to the &lt;strong&gt;Web&lt;/strong&gt; tab and select &lt;strong&gt;Add a new web app&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When prompted to select a Python Web framework, choose &lt;strong&gt;Flask&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Choose your python version. Here, I am choosing &lt;strong&gt;Python 3.6 (Flask 0.12)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Enter a path for a Python file I wish to hold my Dash app. I entered:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/username/mysite/dashing_demo_app.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Put the script of your Dash app in &lt;code class=&quot;highlighter-rouge&quot;&gt;dashing_demo_app.py&lt;/code&gt;. You can use the script in the sample file 
&lt;a href=&quot;https://github.com/conradho/dashingdemo/blob/master/dashing_demo_app.py&quot;&gt;dashing_demo_app.py&lt;/a&gt; 
provided on the GitHub repo of pythonanywhere‚Äôs staff.&lt;/p&gt;

&lt;p&gt;Next I have to set up a virtual environment that the app is running in. I am using the 
&lt;a href=&quot;https://github.com/conradho/dashingdemo/blob/master/requirements3.6.txt&quot;&gt;requirements3.6.txt&lt;/a&gt; 
provided in the above GitHub repo.&lt;/p&gt;

&lt;p&gt;Go to the &lt;strong&gt;Files&lt;/strong&gt; tab to create &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements3.6.txt&lt;/code&gt; in your home directory. Then, 
go to the &lt;strong&gt;Consoles&lt;/strong&gt; tab to start a new &lt;em&gt;bash&lt;/em&gt; session. 
Create a virtual environment &lt;em&gt;dashappenv&lt;/em&gt; with the following command in the home directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkvirtualenv dashappenv --python=/usr/bin/python3.6
pip install -r requirements3.6.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, go to the &lt;strong&gt;Web&lt;/strong&gt; tab and enter under &lt;strong&gt;Virtualenv&lt;/strong&gt; the path of your virtual environment:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/username/.virtualenvs/dashappenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, modify your WSGI file. Instead of&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from dashing_demo_app import app as application
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;provided, enter&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from dashing_demo_app import app
application = app.server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to import your app.&lt;/p&gt;

&lt;p&gt;It‚Äôs all done. Go to &lt;strong&gt;Web&lt;/strong&gt; to reload your app. You can then click the URL of your webapp and see it running. :) 
Here is the &lt;a href=&quot;http://csyhuang.pythonanywhere.com&quot;&gt;sample webapp&lt;/a&gt; I built based on the example in 
&lt;a href=&quot;https://dash.plot.ly/getting-started&quot;&gt;Dash tutorial&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Published on Science!</title>
   <link href="http://localhost:4000/2018/05/24/our-paper-on-science/"/>
   <updated>2018-05-24T00:00:00-05:00</updated>
   <id>http://localhost:4000/2018/05/24/our-paper-on-science</id>
   <content type="html">&lt;p&gt;Our paper, &lt;a href=&quot;https://doi.org/10.1126/science.aat0721&quot;&gt;Nakmaura and Huang (2018), Atmospheric blocking as a traffic jam in the jet stream&lt;/a&gt; 
is now available on Science!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://doi.org/10.1126/science.aat0721&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/img/NH18-Screenshot.png&quot; alt=&quot;NH18 Science Paper Preview&quot; style=&quot;width: 100%;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the 
&lt;a href=&quot;https://news.uchicago.edu/story/new-theory-finds-traffic-jams-jet-stream-cause-abnormal-weather-patterns&quot;&gt;press release&lt;/a&gt; 
from UChicago about the publication.&lt;/p&gt;

&lt;p&gt;For interested researchers, the sample script to reproduce the results can be found in the directory 
&lt;a href=&quot;https://github.com/csyhuang/hn2016_falwa/tree/master/examples/nh2018_science&quot;&gt;nh2018_science&lt;/a&gt; 
of the my python package‚Äôs GitHub repo &lt;a href=&quot;https://github.com/csyhuang/hn2016_falwa&quot;&gt;hn2016_falwa&lt;/a&gt;. 
You can download ERA-Interim reanalysis data with &lt;code class=&quot;highlighter-rouge&quot;&gt;download_example.py&lt;/code&gt; to run the local wave 
activity and flux analysis in the jupyter notebook demo &lt;a href=&quot;https://github.com/csyhuang/hn2016_falwa/blob/master/examples/nh2018_science/demo_script_for_nh2018.ipynb&quot;&gt;demo_script_for_nh2018.ipynb&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have fun and feel free to email me (csyhuang at uchicago.edu) if you are interested 
in using the code and/or have questions about it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing Stanford Core NLP package on Mac OS X</title>
   <link href="http://localhost:4000/2018/04/12/installing-stanfordCoreNLP/"/>
   <updated>2018-04-12T00:00:00-05:00</updated>
   <id>http://localhost:4000/2018/04/12/installing-stanfordCoreNLP</id>
   <content type="html">&lt;p&gt;I am following instructions on the &lt;a href=&quot;https://github.com/stanfordnlp/CoreNLP&quot;&gt;GitHub page of Stanford Core NLP&lt;/a&gt; 
under &lt;strong&gt;Build with Ant&lt;/strong&gt;. To install &lt;code class=&quot;highlighter-rouge&quot;&gt;ant&lt;/code&gt;, you can use homebrew:
&lt;!--more--&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install ant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Step 5, you have to include the .jar files in the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreNLP/lib&lt;/code&gt; and 
&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreNLP/liblocal&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;CLASSPATH&lt;/code&gt;. To do this, first, I install &lt;em&gt;coreutils&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install coreutils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;such that I can use the utility &lt;code class=&quot;highlighter-rouge&quot;&gt;realpath&lt;/code&gt; there. Then, I include the following in my &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for file in `find /Users/clare.huang/CoreNLP/lib/ -name &quot;*.jar&quot;`;
  do export CLASSPATH=&quot;$CLASSPATH:`realpath $file`&quot;;
done

for file in `find /Users/clare.huang/CoreNLP/liblocal/ -name &quot;*.jar&quot;`;
  do export CLASSPATH=&quot;$CLASSPATH:`realpath $file`&quot;;
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(I guess there are better ways to combine the commands above. Let me know if there are.)&lt;/p&gt;

&lt;p&gt;To run CoreNLP, I have to download the latest version of it, and place it in the directory 
&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreNLP/&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://nlp.stanford.edu/software/stanford-corenlp-full-2018-01-31.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The latest version is available on 
their &lt;a href=&quot;https://stanfordnlp.github.io/CoreNLP/download.html#steps&quot;&gt;official website&lt;/a&gt;. Unzip 
it, and add all the .jar there to the $CLASSPATH.&lt;/p&gt;

&lt;p&gt;Afterwards, you shall be able to run CoreNLP with the commands provided 
in &lt;a href=&quot;https://www.khalidalnajjar.com/setup-use-stanford-corenlp-server-python/&quot;&gt;the blogpost of Khalid Alnajjar&lt;/a&gt; 
(under &lt;strong&gt;Running Stanford CoreNLP Server&lt;/strong&gt;). If you have no problem starting the server, 
you shall be able to see the interface on your browser at http://localhost:9000/:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -mx4g -cp &quot;*&quot; edu.stanford.nlp.pipeline.StanfordCoreNLPServer -annotators &quot;tokenize,ssplit,pos,lemma,parse,sentiment&quot; -port 9000 -timeout 30000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yay. Next, I will try setting up the python interface.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing java on Mac</title>
   <link href="http://localhost:4000/2018/04/11/installing-java-on-mac/"/>
   <updated>2018-04-11T00:00:00-05:00</updated>
   <id>http://localhost:4000/2018/04/11/installing-java-on-mac</id>
   <content type="html">&lt;p&gt;The information of this post was learnt from &lt;a href=&quot;https://stackoverflow.com/questions/38921362/javas-path-still-usr-bin-java-after-brew-cask-install-java&quot;&gt;this StackOverflow post&lt;/a&gt; and 
also &lt;a href=&quot;http://davidcai.github.io/blog/posts/install-multiple-jdk-on-mac/&quot;&gt;David Cai‚Äôs blog post&lt;/a&gt; on 
how to install multiple Java version on Mac OS High Sierra.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;brew cask&lt;/code&gt; installed on Mac (see &lt;a href=&quot;https://github.com/caskroom/homebrew-cask/blob/master/USAGE.md&quot;&gt;homebrew-cask instructions&lt;/a&gt;), 
different versions of java can be installed via the command (I want to install java9 here, for example):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap caskroom/versions
brew cask install java9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After installing, the symlink &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/java&lt;/code&gt; is still pointing to the old native Java. You can check 
where it points to with the command &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -la /usr/bin/java&lt;/code&gt;. It is probably pointing to the old native 
java path:
&lt;code class=&quot;highlighter-rouge&quot;&gt;
/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java
&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, homebrew installed java into the directory
&lt;code class=&quot;highlighter-rouge&quot;&gt;/Library/Java/JavaVirtualMachines/jdkx.x.x_xxx.jdk/Contents/Home&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To easily switch between different java environments, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;jEnv&lt;/code&gt;. The installing 
instructions can be found on &lt;a href=&quot;http://www.jenv.be/&quot;&gt;jEnv‚Äôs official page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Adding an RSS feed to this site</title>
   <link href="http://localhost:4000/2018/03/30/adding-rss-feed/"/>
   <updated>2018-03-30T00:00:00-05:00</updated>
   <id>http://localhost:4000/2018/03/30/adding-rss-feed</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://csyhuang.github.io/feed.xml&quot;&gt;Here is the link&lt;/a&gt; 
to the RSS feed of this blog.&lt;/p&gt;

&lt;p&gt;Thanks to the instructions on 
&lt;a href=&quot;http://joelglovier.com/writing/rss-for-jekyll&quot; target=&quot;_blank&quot;&gt;Joel Glovier‚Äôs blog post&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Python Library and scripts for downloading ERA-Interim Data</title>
   <link href="http://localhost:4000/2018/02/23/ECMWF-download/"/>
   <updated>2018-02-23T00:00:00-06:00</updated>
   <id>http://localhost:4000/2018/02/23/ECMWF-download</id>
   <content type="html">&lt;h3 id=&quot;update-ecmwf-api-clients-on-pip-and-conda&quot;&gt;Update: ECMWF API Clients on pip and conda&lt;/h3&gt;

&lt;p&gt;The ECMWF API Python Client is now available on pypi and anaconda.&lt;br /&gt;
The Climate Corporation has distributed the ECMWF API Python Client on 
pypi. Now it can be installed via:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;pip install ecmwf-api-client&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anaconda users on OS X/linux system can install the package via:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;conda install -c bioconda ecmwfapi&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- 
### Old steps (1-3)

```
(1) Installing the package requires the python Setuptools. You can set it up locally with the command:

&gt; wget https://bootstrap.pypa.io/ez_setup.py -O - | python - --user

(2) Download the Python library package and unzip it (You can do it in any directory)
&gt; wget https://software.ecmwf.int/wiki/download/attachments/56664858/ecmwf-api-client-python.tgz
&gt; tar zxf ecmwf-api-client-python.tgz

You shall see four items extracted:
- example.py
- ecmwfapi/__init__.py
- ecmwfapi/api.py
- setup.py

(3) In the directory with these four items, install the package with:
&gt; python setup.py install --user
```
 --&gt;
&lt;!--more--&gt;
&lt;p&gt;To use the sample script, you need an API key ( .ecmwfapirc ) placed in your home directory. You can retrieve that by logging in: https://api.ecmwf.int/v1/key/
Create a file named ‚Äú.ecmwfapirc‚Äù in your home directory and put in the content shown on the page:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;url&quot;   : &quot;https://api.ecmwf.int/v1&quot;,
    &quot;key&quot;   : &quot;(...)&quot;,
    &quot;email&quot; : &quot;(...)&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After doing that, in the directory with the sample script example.py, you can test the package by running it:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;python example.py&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should see it successfully retrieves a .grib file if the package has been set up properly.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://software.ecmwf.int/wiki/display/WEBAPI/Python+ERA-interim+examples&quot;&gt;sample scripts&lt;/a&gt; 
available on the ECMWF website (look under ‚ÄúSame request NetCDF format‚Äù). Below is a example of python 
script I wrote to retrieves zonal wind, meridional wind and temperature data at all pressure levels 
during the time period 2017-07-01 to 2017-07-31 in 6-hour intervals:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ecmwfapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECMWFDataServer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECMWFDataServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;param_u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;131.128&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;132.128&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;130.128&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_u&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                               &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;dataset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;interim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2017-07-01/to/2017-07-31&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;expver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;grid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.5/1.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;levelist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1/2/3/5/7/10/20/30/50/70/100/125/150/175/200/225/250/300/350/400/450/500/550/600/650/700/750/775/800/825/850/875/900/925/950/975/1000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;levtype&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;param&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;step&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;stream&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;oper&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;netcdf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;00:00:00/06:00:00/12:00:00/18:00:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;an&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2017-07-01/to/2017-07-31&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.nc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I learnt the above steps on these pages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://software.ecmwf.int/wiki/display/WEBAPI/Access+ECMWF+Public+Datasets#AccessECMWFPublicDatasets-python&quot;&gt;ECMWF python library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/setuptools&quot;&gt;Python setuptool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Resources on deep learning</title>
   <link href="http://localhost:4000/2018/01/27/resources-for-deeplearning/"/>
   <updated>2018-01-27T00:00:00-06:00</updated>
   <id>http://localhost:4000/2018/01/27/resources-for-deeplearning</id>
   <content type="html">&lt;p&gt;I have been searching for solutions how to use Recurrent Neural Networks for text classifications. Here are some useful resources I‚Äôve found:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.deepdetect.com/&quot;&gt;Open Source Deep Learning Server&lt;/a&gt; has a library of &lt;a href=&quot;https://www.deepdetect.com/applications/text_model/&quot;&gt;pre-trained neural nets&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;An &lt;a href=&quot;https://www.analyticsvidhya.com/blog/2017/06/transfer-learning-the-art-of-fine-tuning-a-pre-trained-model/&quot;&gt;article on Analytics Vidhya&lt;/a&gt; 
discuss about transfer learning &amp;amp; The art of using pre-trained models in deep learning. They also have &lt;a href=&quot;https://www.analyticsvidhya.com/blog/2017/06/word-embeddings-count-word2veec/&quot;&gt;an article about word embeddings&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Keras has a list of &lt;a href=&quot;https://keras.io/applications/#usage-examples-for-image-classification-models&quot;&gt;deep learning models with pre-trained weights&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hyperopt.github.io/hyperopt/&quot;&gt;Hyperopt&lt;/a&gt; is a python library for Distributed Asynchronous Hyperparameter Optimization.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920052289.do&quot;&gt;Hands-On Machine Learning with Scikit-Learn and TensorFlow&lt;/a&gt; has discussion on deep learning from Ch.10 onward.&lt;/li&gt;
  &lt;li&gt;Kaggle forum has a beginner tutorial of &lt;a href=&quot;https://www.kaggle.com/sbongo/for-beginners-tackling-toxic-using-keras/notebook&quot;&gt;using RNN to classify toxic comments&lt;/a&gt; on wikipedia editing page.&lt;br /&gt;
(To be updated.)&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Three co-authored papers submitted</title>
   <link href="http://localhost:4000/2018/01/23/Publications-updated/"/>
   <updated>2018-01-23T00:00:00-06:00</updated>
   <id>http://localhost:4000/2018/01/23/Publications-updated</id>
   <content type="html">&lt;p&gt;The &lt;a href=&quot;/publications/&quot;&gt;publication page&lt;/a&gt; 
has been updated with 3 submitted manuscripts.&lt;/p&gt;

&lt;p&gt;Updates on Feb 9, 2018: The manuscript ‚ÄúRole of Finite-Amplitude Rossby Waves and Nonconservative 
Processes in Downward Migration of Extratropical Flow Anomalies‚Äù has been accepted by &lt;em&gt;Journal of Atmospheric Sciences&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The subroutine 
&lt;code class=&quot;highlighter-rouge&quot;&gt;wrapper.qgpv_eqlat_lwa_ncforce&lt;/code&gt; for computing effective diffusivity, which quantifies the 
damping on wave transiences by irreversible mixing in the stratosphere during a 
stratospheric sudden warming event, can be found in &lt;a href=&quot;http://hn2016-falwa.readthedocs.io/en/latest/Wrapper%20Functions.html&quot;&gt;my python package&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting up algs4 on Linux</title>
   <link href="http://localhost:4000/2018/01/02/setting-up-algs4/"/>
   <updated>2018-01-02T00:00:00-06:00</updated>
   <id>http://localhost:4000/2018/01/02/setting-up-algs4</id>
   <content type="html">&lt;p&gt;I am interested in going through the exercise from Princeton University‚Äôs 
&lt;a href=&quot;https://algs4.cs.princeton.edu/code/&quot;&gt;Algorithm&lt;/a&gt; course. I found someone 
wrote a handy bash script to set up the environment on Mac OS/Linux:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/JIghtuse/021604bee56bddab6173c919da7dd2ad&quot;&gt;https://gist.github.com/JIghtuse/021604bee56bddab6173c919da7dd2ad&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>My python library updated to v0.2.0!</title>
   <link href="http://localhost:4000/2017/11/20/significant-update-to-v0-2-0/"/>
   <updated>2017-11-20T00:00:00-06:00</updated>
   <id>http://localhost:4000/2017/11/20/significant-update-to-v0-2-0</id>
   <content type="html">&lt;p&gt;I have updated my python library &lt;a href=&quot;http://github.com/csyhuang/hn2016_falwa&quot;&gt;hn2016_falwa&lt;/a&gt; to 
v0.2.0 (see &lt;a href=&quot;https://github.com/csyhuang/hn2016_falwa/releases/tag/v0.2.0&quot;&gt;release note&lt;/a&gt;! Now 
it includes functions to compute the contribution of non-conservative forces to wave activity.&lt;/p&gt;

&lt;p&gt;Moreover, the &lt;a href=&quot;http://hn2016-falwa.readthedocs.io/en/latest/&quot;&gt;documentation page&lt;/a&gt; generated 
with Sphinx is now hosted on readthedocs.org! Check it out!&lt;/p&gt;

&lt;p&gt;A side note: somehow I made multiple commits to remedy mistake. The git commands to squash 
the (3, for example) commits are:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rebase -i origin/master~3 master
git push origin +master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Wrapping Fortrain Codes in Python</title>
   <link href="http://localhost:4000/2017/11/07/f2py-on-mac/"/>
   <updated>2017-11-07T00:00:00-06:00</updated>
   <id>http://localhost:4000/2017/11/07/f2py-on-mac</id>
   <content type="html">&lt;p&gt;To start with, the &lt;a href=&quot;https://docs.scipy.org/doc/numpy-dev/f2py/getting-started.html&quot;&gt;documentation in Numpy&lt;/a&gt; explains how we can wrap fortran code in python using f2py.&lt;/p&gt;

&lt;p&gt;You need a fortran compiler to run f2py. I‚Äôve found a &lt;a href=&quot;http://hpc.sourceforge.net/&quot;&gt;pre-compiled version of GCC&lt;/a&gt; readily installed on Mac OS X.&lt;/p&gt;

&lt;p&gt;(To be continued)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Compiling tensorflow on Mac with SSE, AVX, FMA etc.</title>
   <link href="http://localhost:4000/2017/11/05/tensorflow-on-mac/"/>
   <updated>2017-11-05T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/11/05/tensorflow-on-mac</id>
   <content type="html">&lt;p&gt;(Ideally, I shall run tensorflow somewhere else rather than on my MacBook.)&lt;/p&gt;

&lt;p&gt;When I install keras with Anaconda on my Mac OS X, with tensorflow as the backend, the following warning comes up when
 running the sample script:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To use those instructions (&lt;em&gt;SSE4.1 SSE4.2 AVX AVX2 FMA&lt;/em&gt;), tensorflow has to be compiled from source. The instructions are available &lt;a href=&quot;https://www.tensorflow.org/install/install_sources&quot;&gt;here&lt;/a&gt;. 
Using the following command to build the source:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bazel build &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; opt &lt;span class=&quot;nt&quot;&gt;--copt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-march&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;native &lt;span class=&quot;nt&quot;&gt;--copt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-mfpmath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;both &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cuda &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; //tensorflow/tools/pip_package:build_pip_package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I got the following error:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Problem with java installation: couldn't find/access rt.jar in /Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It happens that &lt;em&gt;rt.jar&lt;/em&gt; is not present in Java 9. To solve it, install a version of Java 8:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew cask &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;caskroom/versions/java8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and then specify the path of Java 8 (Change the version number ‚Äò1.8.0_162‚Äô to that of the version you installed):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;/usr/libexec/java_home &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 1.8.0_162&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Afterwards, I try to build tensorflow from source again, and it successfully includes the instructions above.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting up MySQL / access with python on Mac OS</title>
   <link href="http://localhost:4000/2017/09/09/install-mysql/"/>
   <updated>2017-09-09T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/09/09/install-mysql</id>
   <content type="html">&lt;p&gt;Today I wanted to setup an automated kickstarter scraper on &lt;a href=&quot;http://pythonanywhere.com&quot;&gt;Python Anywhere&lt;/a&gt; but realized that 
only MySQL is freely supported there (while I‚Äôve been using PostgreSQL). So, a time to switch?&lt;/p&gt;

&lt;p&gt;Here is how I install MySQL on my Mac and have it accessed with &lt;em&gt;SQLAlchemy&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download and install &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.6/en/osx-installation-pkg.html&quot;&gt;MySQL from Oracle&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Go to &lt;em&gt;System Preferences&lt;/em&gt; to start the MySQL server.&lt;/li&gt;
  &lt;li&gt;Navigate to the bin directory and login with the temporary password shown at the end of the installation:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/mysql/bin
./mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create another set of &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;password&lt;/em&gt; that you use instead of &lt;em&gt;root&lt;/em&gt;.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE USER username@localhost IDENTIFIED BY &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;I have installed &lt;em&gt;pymysql&lt;/em&gt; and &lt;em&gt;sqlalchemy&lt;/em&gt; in Python to access the MySQL database. To access the database:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy_utils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_database&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# dbname is the database name
# user_id and user_password are what you put in above
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mysql+pymysql://%s:%s@localhost:3306/%s&quot;&lt;/span&gt;
                       &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;create_database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;# Create database if it doesn't exist.
&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Connect to the MySQL engine
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'new_table'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DROP TABLE IF EXISTS new_table;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Drop if such table exist
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Executing SQL commands is rather easy by using:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enjoy! :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Software Engineering Project Note-taking</title>
   <link href="http://localhost:4000/2017/08/18/software-engineering-project-note-taking/"/>
   <updated>2017-08-18T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/08/18/software-engineering-project-note-taking</id>
   <content type="html">&lt;p&gt;Learnt a lot from peers today! :D Here are quick notes on packages they have used for their software engineering project:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;: You store your docker images there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt;: The docker images are pulled there, together with the images.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LQ6pFgQXQ0Q&quot;&gt;Sphinx tutorial&lt;/a&gt;: Useful instructions how to set Python documentation up&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/erocarrera/pydot&quot;&gt;pydot&lt;/a&gt; and &lt;a href=&quot;http://www.graphviz.org/&quot;&gt;graphviz&lt;/a&gt;: Draw graphs of objects and arrows&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Free Online Deep Learning Resources</title>
   <link href="http://localhost:4000/2017/08/10/deep-learning-resources/"/>
   <updated>2017-08-10T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/08/10/deep-learning-resources</id>
   <content type="html">&lt;p&gt;These are resources related to deep learning from conversation with friends:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/songrotek/Deep-Learning-Papers-Reading-Roadmap&quot;&gt;Deep Learning Paper Reading Roadmap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://neuralnetworksanddeeplearning.com/&quot;&gt;Neural Networks and Deep Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Books introduced in newsletter of Data Science Central:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.deeplearningbook.org/&quot;&gt;Deep Learning Book&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning html, CSS, javascripts and jinja2</title>
   <link href="http://localhost:4000/2017/06/24/learning-html-css-js-jinja2/"/>
   <updated>2017-06-24T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/06/24/learning-html-css-js-jinja2</id>
   <content type="html">&lt;p&gt;On my way building a webapp with python and Flask, I need to include input options to make the app interactive. Here are some great sites I‚Äôve learnt things from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://w3schools.com&quot;&gt;w3schools.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jqueryui.com/datepicker/&quot;&gt;jQuery user interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jinja.pocoo.org/docs/2.9/&quot;&gt;Jinja2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/gallery/&quot;&gt;CSS-Tricks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shapebootstrap.net/free-templates&quot;&gt;ShapeBootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More updates later.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting up ubuntu on AWS</title>
   <link href="http://localhost:4000/2017/06/11/setup-ubuntu-aws/"/>
   <updated>2017-06-11T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/06/11/setup-ubuntu-aws</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;(https://stackoverflow.com/questions/32389599/anaconda-importerror-libsm-so-6-cannot-open-shared-object-file-no-such-file-o)&quot;&gt;Solution&lt;/a&gt; for the error &lt;em&gt;libSM.so.6: cannot open shared object file&lt;/em&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Python packages for Sentiment Analysis</title>
   <link href="http://localhost:4000/2017/06/10/Python-packages-for-Sentiment-Analysis/"/>
   <updated>2017-06-10T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/06/10/Python-packages-for-Sentiment-Analysis</id>
   <content type="html">&lt;p&gt;On top of utilities in &lt;em&gt;nltk.sentiment&lt;/em&gt;, there are also some packages for training and combining classifiers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japerk/nltk-trainer&quot;&gt;NLTK-trainer&lt;/a&gt; by &lt;a href=&quot;https://www.linkedin.com/in/jacobperkins&quot;&gt;Jacob Perkins&lt;/a&gt;, accompanied by the &lt;a href=&quot;https://github.com/japerk/nltk3-cookbook&quot;&gt;NLTK-cookbook&lt;/a&gt; he wrote.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/clips/pattern&quot;&gt;Pattern.en&lt;/a&gt; developed by the &lt;a href=&quot;http://www.clips.ua.ac.be/&quot;&gt;Computational Linguistics Research Group&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Data sets for training a sentiment classifier: &lt;a href=&quot;https://www.cs.cornell.edu/people/pabo/movie-review-data/&quot;&gt;Movie Review Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(More to be updated)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Published a paper on Local Wave Activity Budget!</title>
   <link href="http://localhost:4000/2017/05/15/LWA-budget-paper-published/"/>
   <updated>2017-05-15T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/05/15/LWA-budget-paper-published</id>
   <content type="html">&lt;p&gt;I‚Äôve published a &lt;a href=&quot;http://onlinelibrary.wiley.com/doi/10.1002/2017GL073760/abstract;jsessionid=2EEA61FFE129914E672C6F10497975B2.f02t02&quot;&gt;new paper&lt;/a&gt; on Geophysical Research Letters!&lt;/p&gt;

&lt;p&gt;Climate dynamicists have derived a conservation relation based on &lt;em&gt;small-amplitude wave assumption&lt;/em&gt; for wave activity (&lt;em&gt;A&lt;/em&gt;) that describes evolution of Rossby wave packets:&lt;br /&gt;
&lt;img src=&quot;/assets/img/simple-wave-activity-equation.png&quot; alt=&quot;Wave activity flux equation&quot; style=&quot;width: 250px;&quot; /&gt;&lt;br /&gt;
However, only the wave activity flux vector on the RHS has been used to diagnose realistic climate data. &lt;em&gt;A&lt;/em&gt; is ill-defined when wave amplitude is large (i.e. ‚Äòof finite-amplitude‚Äô).  In &lt;a href=&quot;http://journals.ametsoc.org/doi/abs/10.1175/JAS-D-15-0194.1&quot;&gt;Huang &amp;amp; Nakamura (2016)&lt;/a&gt;, we introduced a new theory of wave activity applicable to large waves. We thus can obtain a well-defined &lt;em&gt;A&lt;/em&gt; even from real data. This is the &lt;strong&gt;first piece of work that compare LHS and RHS of the conservative part of equation above for reanalysis data&lt;/strong&gt;. This advance allows us to estimate the overall non-conservative contribution (natural/human-induced forcings) to the observed flow.&lt;/p&gt;

&lt;p&gt;Major results include:&lt;/p&gt;

&lt;p&gt;(1) Our estimation of transient wave activity (top panel) is consistent with &lt;a href=&quot;http://journals.ametsoc.org/doi/abs/10.1175/1520-0469%281986%29043%3C1657%3ATDPOTQ%3E2.0.CO%3B2&quot;&gt;previous work&lt;/a&gt; (bottom panel, assuming small-amplitude waves) and is better behaving.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Revise_fig2.png&quot; alt=&quot;Comparison with previous work&quot; style=&quot;width: \textwidth;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(2) We can break down the local wave activity budget at seasonal time-scale.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/Revise_fig3.png&quot; alt=&quot;Wave activity flux equation&quot; style=&quot;width: \textwidth;&quot; /&gt;  
&lt;/p&gt;

&lt;p&gt;(3) We can also break down the budget in synoptic time-scale with the use of co-spectral analysis.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/Revise_fig4.png&quot; alt=&quot;Wave activity flux equation&quot; style=&quot;width: \textwidth;&quot; /&gt;
&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Switching to Jekyll</title>
   <link href="http://localhost:4000/2017/05/12/switching-to-jekyll/"/>
   <updated>2017-05-12T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/05/12/switching-to-jekyll</id>
   <content type="html">&lt;p&gt;I‚Äôm switching from a traditional html webpage builder to Jekyll user! Hope to update more often!&lt;/p&gt;

&lt;p&gt;I set up Jekyll in my Mac OS X with &lt;a href=&quot;http://brew.sh&quot;&gt;homebrew&lt;/a&gt;,  &lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt; and &lt;a href=&quot;https://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To see how to set jekyll up on Windows, refer to my &lt;a href=&quot;/2017/02/12/jekyll-on-windows/&quot;&gt;older post&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Installation of Jekyll on Windows 10</title>
   <link href="http://localhost:4000/2017/02/12/jekyll-on-windows/"/>
   <updated>2017-02-12T00:00:00-06:00</updated>
   <id>http://localhost:4000/2017/02/12/jekyll-on-windows</id>
   <content type="html">&lt;p&gt;Below are the procedures I used to install Jekyll with problem solvers:&lt;/p&gt;

&lt;p&gt;Main reference sites:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/windows/&quot;&gt;Jekyll on Windows&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://davidburela.wordpress.com/2015/11/28/easily-install-jekyll-on-windows-with-3-command-prompt-entries-and-chocolatey/&quot;&gt;Easily install Jekyll on Windows with 3 command prompt entries and Chocolatey&lt;/a&gt;&lt;br /&gt;
&lt;!--more--&gt;
Procedures:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Open Powershell&lt;/li&gt;
  &lt;li&gt;Run Powershell as administrator: [&lt;a href=&quot;http://stackoverflow.com/questions/7690994/powershell-running-a-command-as-administrator&quot;&gt;Reference&lt;/a&gt;]
    &lt;blockquote&gt;
      &lt;p&gt;Start-Process powershell -Verb runAs&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Change execution policy to enable installation of Chocolatey (a package manager): [&lt;a href=&quot;http://stackoverflow.com/questions/4037939/powershell-says-execution-of-scripts-is-disabled-on-this-system&quot;&gt;Reference&lt;/a&gt;]
    &lt;blockquote&gt;
      &lt;p&gt;Set-ExecutionPolicy RemoteSigned&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Installing Chocolatey: [&lt;a href=&quot;https://chocolatey.org/install&quot;&gt;Reference&lt;/a&gt;]
    &lt;blockquote&gt;
      &lt;p&gt;iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Update the certificate to install ruby: [&lt;a href=&quot;http://guides.rubygems.org/ssl-certificate-update/&quot;&gt;Reference&lt;/a&gt;]&lt;br /&gt;
&lt;a href=&quot;http://guides.rubygems.org/ssl-certificate-update/&quot;&gt;http://guides.rubygems.org/ssl-certificate-update/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install ruby:
    &lt;blockquote&gt;
      &lt;p&gt;choco install ruby -y&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Close the window and open a new command prompt with Administrator access (i.e. step 2)&lt;/li&gt;
  &lt;li&gt;Install gem bundler
    &lt;blockquote&gt;
      &lt;p&gt;gem install bundler&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Install Jekyll
    &lt;blockquote&gt;
      &lt;p&gt;gem install jekyll&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Done :)&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing Python Library for downloading ERA-Interim Data</title>
   <link href="http://localhost:4000/2016/06/13/ECMWF-download/"/>
   <updated>2016-06-13T00:00:00-05:00</updated>
   <id>http://localhost:4000/2016/06/13/ECMWF-download</id>
   <content type="html">&lt;h3 id=&quot;update-ecmwf-api-clients-on-pip-and-conda&quot;&gt;Update: ECMWF API Clients on pip and conda&lt;/h3&gt;

&lt;p&gt;The ECMWF API Python Client is now available on pypi and anaconda.&lt;br /&gt;
The Climate Corporation has distributed the ECMWF API Python Client on 
pypi. Now it can be installed via:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;pip install ecmwf-api-client&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are using anaconda, OS X/linux users can install that via&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;conda install -c bioconda ecmwfapi&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- 
### Old steps (1-3)

```
(1) Installing the package requires the python Setuptools. You can set it up locally with the command:

&gt; wget https://bootstrap.pypa.io/ez_setup.py -O - | python - --user

(2) Download the Python library package and unzip it (You can do it in any directory)
&gt; wget https://software.ecmwf.int/wiki/download/attachments/56664858/ecmwf-api-client-python.tgz
&gt; tar zxf ecmwf-api-client-python.tgz

You shall see four items extracted:
- example.py
- ecmwfapi/__init__.py
- ecmwfapi/api.py
- setup.py

(3) In the directory with these four items, install the package with:
&gt; python setup.py install --user
```

(4) To use the sample script, you need an API key ( .ecmwfapirc ) placed in your home directory. You can retrieve that by logging in: https://api.ecmwf.int/v1/key/
Create a file named &quot;.ecmwfapirc&quot; in your home directory and put in the content shown on the page:

```
{
    &quot;url&quot;   : &quot;https://api.ecmwf.int/v1&quot;,
    &quot;key&quot;   : &quot;(...)&quot;,
    &quot;email&quot; : &quot;(...)&quot;
}
```

(5) After doing that, in the directory with the sample script example.py, you can test the package by running it:
&gt; python example.py  

You should see it successfully retrieves a .grib file if the package has been set up properly.

(6) To download python script for retrieving ERA-Interim netCDF files, there are sample script available here (look under &quot;Same request NetCDF format&quot;):
[https://software.ecmwf.int/wiki/display/WEBAPI/Python+ERA-interim+examples]

In fact, on the ECMWF Public Dataset web interface page you retrieve ERA-Interim data, after you select the subset of data, instead of pressing &quot;Retrieve NetCDF&quot;, there is another button named &quot;View the MARS request&quot;, and it will show how the python script for retrieving that dataset looks like.

I learnt the above steps on these pages:
- [ECMWF python library](https://software.ecmwf.int/wiki/display/WEBAPI/Access+ECMWF+Public+Datasets#AccessECMWFPublicDatasets-python)
- [Python setuptool](https://pypi.python.org/pypi/setuptools)
 --&gt;
</content>
 </entry>
 

</feed>
